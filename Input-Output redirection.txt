Definition
I/O redirection in Linux allows you to change where a command's input comes from or where its output goes. This is achieved by using special characters like >, <, >>, 2>, and |, which redirect standard input, standard output, standard error, and pipe output to different destinations (files, devices, or other commands). 

I/O redirection in Linux allows you to change the default input and output streams of a command. You can redirect standard output, standard error, or both to files or other commands. This is achieved using redirection operators like >, >>, <, 2>, 2>>, &>, and &>>. 

====================================================================================================================================================
====================================================================================================================================================

Key Concepts:
•Standard Input (stdin): The default source of input for a command, usually the keyboard. 
•Standard Output (stdout): The default destination for a command's output, usually the terminal screen. 
•Standard Error (stderr): The destination for error messages, usually the terminal screen. 
•File Descriptors: Numerical identifiers representing open files or input/output streams (e.g., 0 for stdin, 1 for stdout, 2 for stderr). 

Common Redirection Operators:
> (Output Redirection):
Redirects standard output to a file. If the file exists, it's overwritten; if it doesn't, it's created. 
•Example: ls > file_list.txt (Saves the output of the ls command to file_list.txt). 


>> (Append Output):
Redirects standard output to a file, appending to the end of the file instead of overwriting it. 
•Example: echo "New text" >> file_list.txt (Appends "New text" to file_list.txt). 


< (Input Redirection):
Redirects standard input from a file. 
•Example: cat < input.txt (Reads the contents of input.txt and prints them to the screen). 


2> (Error Redirection):
Redirects standard error to a file. 
•Example: command 2> error_log.txt (Saves any error messages generated by command to error_log.txt). 


| (Piping):
Redirects the output of one command as input to another command. 
•Example: ls -l | grep "file.txt" (Lists files in detail and then filters for lines containing "file.txt"). 


&> (Redirect Both Output and Error):
Redirects both standard output and standard error to a file. 
•Example: command &> output.txt (Saves both the output and error messages of command to output.txt).

====================================================================================================================================================
====================================================================================================================================================

Here are some examples: 
Output Redirection:
•ls > file.txt redirects the output of the ls command to a file named file.txt. If file.txt already exists, it will be overwritten.
•date >> log.txt appends the output of the date command to the end of log.txt. If log.txt doesn't exist, it will be created.


Input Redirection:
•sort < input.txt redirects the input for the sort command from the file input.txt. The sorted output will be displayed on the terminal.


Error Redirection:
•command 2> error.log redirects the standard error output (error messages) of command to error.log. The 2> operator specifically targets the stderr stream.


Combined Output and Error Redirection:
•command &> output.txt redirects both standard output and standard error to output.txt. This is equivalent to command > output.txt 2>&1.


Combined Output and Error Redirection (Append):
•command &>> log.txt appends both standard output and standard error to log.txt. This is equivalent to command >> log.txt 2>&1.
These redirections can be combined to create more complex scenarios. For example, you can redirect both standard output and standard error to a file while also piping the standard output to another command. 
 